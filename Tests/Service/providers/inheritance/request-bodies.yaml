---
openapi: 3.0.2
info:
  title: Inheritance schemas
  version: 1.0.0
paths:
  /api/users:
    post:
      tags:
        - user
      summary: Create new user
      operationId: user.create
      security:
        - adminToken: []
      responses:
        '401':
          description: Not authenticated
        '403':
          description: Access token does not have the required scope
      requestBody:
        $ref: '#/components/requestBodies/UserCreate'
  /api/registration:
    post:
      tags:
        - user
      summary: Create new user
      operationId: user.create
      security:
        - adminToken: []
      responses:
        '401':
          description: Not authenticated
        '403':
          description: Access token does not have the required scope
      requestBody:
        $ref: '#/components/requestBodies/UserRegistrationInput'
components:
  schemas:
    UserRole:
      type: string
      enum:
        - user
        - admin
        - manager
        - vineyard
      description: User role
    UserPasswordInput:
      type: string
      description: "/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*\\W).{8,30}$/i"
      pattern: "/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*\\W).{8,30}$/i"
      example: "string$^&!11"
    UserAbstract:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
        fullName:
          type: string
          description: User's full name
        city:
          type: string
          description: City
    UserEntity:
      allOf:
        - $ref: '#/components/schemas/UserAbstract'
        - type: object
          properties:
            id:
              type: integer
              format: int32
            role:
              $ref: '#/components/schemas/UserRole'
            enabled:
              type: boolean
              description: User enable status(can be used to ban someone)
            confirmed:
              type: boolean
              description: User confirmed account status(if user confermed the email)
  requestBodies:
    UserCreate:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/UserAbstract'
              - type: object
                properties:
                  role:
                    $ref: '#/components/schemas/UserRole'
                  plainPassword:
                    $ref: '#/components/schemas/UserPasswordInput'
          example:
            email: "john.doe@example.com"
            fullName: "John Doe"
            city: "Paris"
            role: "user"
            plainPassword: "123"
    UserRegistrationInput:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: User email
              fullName:
                type: string
                description: User's full name
              city:
                type: string
                description: City
          example:
            email: "john.doe@example.com"
            fullName: "John Doe"
            city: "Paris"
